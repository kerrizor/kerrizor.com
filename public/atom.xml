<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kerri Miller]]></title>
  <link href="http://kerrizor.com/atom.xml" rel="self"/>
  <link href="http://kerrizor.com/"/>
  <updated>2014-08-11T16:13:19-07:00</updated>
  <id>http://kerrizor.com/</id>
  <author>
    <name><![CDATA[Kerri Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Your Coworker Is a Jerk?]]></title>
    <link href="http://kerrizor.com/blog/2014/08/11/why-your-coworker-is-a-jerk/"/>
    <updated>2014-08-11T15:45:38-07:00</updated>
    <id>http://kerrizor.com/blog/2014/08/11/why-your-coworker-is-a-jerk</id>
    <content type="html"><![CDATA[<p>4 or 5 years ago I was working for a startup that was at a critical inflection point in its growth. <!-- more -->Having expanded quickly from 4 to 12, a pause, then another expansion to 25, it had hit the point where no individual could know the minutiae of other groups. As a developer, you no longer could tell someone everything the designer was working on, and the salespeople couldn&rsquo;t tell you what exactly was in the warehouse or where it was on the shelves. We had begun to specialize, in our individual roles as well as in who we hired. We could afford to finally hire the mechanical engineer with a background in lens design, or a firmware developer with a familiarity with GPS antennae. This was a critical time for the company, because something important was happening.</p>

<p>Diversity.</p>

<p>In software, diversity is discussed as a desirable quality to have in your engineering staff, as there are numerous tangible benefits to doing so. When we discuss diversity, in the software industry we are most often discussing it in terms of race and gender, although having a diversity of age and experience can also be drivers of these benefits, although perhaps not as strongly so. Efforts to bring together divergent paths of thinking, different sources for inspiration and creativity, or angles of concern should be celebrated.</p>

<p>By growing so quickly, we were adding an immense amount of diversity in terms of life experience, professional discipline, educational background, and social expectations. Its one of the critical points in growing a company, and so it should be no surprise that we were having a TERRIBLE time trying to successfully integrate new hires to our existing process while recognizing that they had truly valuable opinions about how we were doing business. What works for 6 crazy people in a garage doesn&rsquo;t work for 25 people in a multi-million dollar company, with differing incentives and goals.</p>

<p>One of the flash points was trying to move our hardware and software process to a more Agile model, running into massive amounts of push-back from some recent hires who really didn&rsquo;t get it (and in fact, were actively working against it.) We knew that being &ldquo;lean&rdquo; and &ldquo;scrappy&rdquo; were critical to our culture, and how we had survived the economic crash and the competition from our competitors, but how could we get the new people joining us to see that?</p>

<p>We started a culture committee. We did frequent all-hands meetings. We had endless conversations about how to define what our culture is, how to communicate it, how to document it, and maybe most importantly, how to make our vague &ldquo;mission statement&rdquo; concrete in the day to day of everyone in the company.</p>

<h2>Mission Critical Statement</h2>

<p>Everyone knows you have to have a Mission Statement or a set of values (bonus points if your values create a witty acronym.) Typically they&rsquo;re like this:</p>

<blockquote><p>&ldquo;Zombo.com is a company devoted to developing the human potential of everyone. Our mission is to enable people to create innovative solutions to improve their lives. We understand that the experience of our customers is our chief product. Happiness is a core component of the Zombo.com experience, for customers and employees. Our motto is: Together, we believe that the best in each of us enriches all of us.&rdquo;</p></blockquote>

<p>How about those companies with an Values Acronym? They&rsquo;re the worst.</p>

<blockquote><p><strong>T</strong>ogether we believe that the best in each of us enriches us all.</p>

<p><strong>H</strong>appiness is a core component to the Zombo.com experience.</p>

<p><strong>U</strong>nderstanding the experience of our customers will drive our success.</p>

<p><strong>D</strong>eveloping human potential is what we&rsquo;re devoted to.</p></blockquote>

<p>Every line in each of these is so vague that it can be interpreted in a myriad of ways, depending upon the life experiences, motivations, and incentives of the reader. As an employee, how will I measure my contributions? What criteria will I and my manager use to determine that I&rsquo;m &ldquo;successful&rdquo;? Its a mess.</p>

<p>What would happen if instead of vague platitudes, we made our mission statement a set of concrete examples? I&rsquo;m a fan of the &ldquo;Belief/Therefor&rdquo; model of documenting culture.</p>

<blockquote><p>We believe in [value], therefor we will [action]&#8221;</p></blockquote>

<p>For each value the team holds, there should be a corresponding action that demonstrates it. Quantify you existing AND your desired culture by generating a list of Values, and identifying 3-4 Actions or Behaviors that express those values in action.</p>

<p>For one team I managed, our list was:</p>

<ul>
<li>Focus</li>
<li>Honesty</li>
<li>Professionalism</li>
<li>Respect</li>
</ul>


<p>We each sat with those 4 values posted on a wall in the office, and a week later met again to generate our Belief/Therefor statements. Here&#8217; a sample of what we came up with.</p>

<ul>
<li>&ldquo;We believe in Focus, therefor we will apply all our efforts and skills on doing the work that we have committed to doing.&rdquo;</li>
<li>&ldquo;We believe in Honesty, therefor when a colleague takes a three-hour lunch break instead of finishing their tasks, we will have a difficult conversation with her.&rdquo;</li>
<li>&ldquo;We believe in Professionalism, therefor we will tell the product owner &#8220;no&rdquo; when we can&rsquo;t do any more work in the Sprint.&#8221;</li>
<li>&ldquo;We believe in Respect, therefore we will show up on time for all meetings.&rdquo;</li>
</ul>


<p>To return to the Zombo.com example, here&rsquo;s the content of the Mission Statement and the Values Acronym with this method applied to it.</p>

<h4>We believe that the best in each of us enriches us all, therefor we</h4>

<ul>
<li>define our individual metrics for success for each employee</li>
<li>we build team goals in a collaborative and open fashion</li>
</ul>


<h4>We believe in Happiness, therefor we</h4>

<ul>
<li>have a flexible PTO policy</li>
<li>encourage everyone to limit their work week to 40 hours</li>
<li>commit to a strong project management culture to limit impossible deadlines</li>
</ul>


<h4>We believe in Understanding the experience of our customers, therefor we</h4>

<ul>
<li>devote time to meeting with clients onsite</li>
<li>bring the customer into our process of iterative cycles</li>
<li>invest in UI/X testing with real people</li>
</ul>


<h4>We believe in developing the potential of our employees, therefor we</h4>

<ul>
<li>give resources, time, and support to all employees who seek to improve their own careers through training and education</li>
<li>are respectful of all our voices in the running of the company</li>
<li>are active as a company in the communities in which we live</li>
</ul>


<p>Definitely more wordy, but far easier to understand, and clearly aren&rsquo;t just lip service to the latest trends in management. Explicit &ldquo;Belief/Therefor&rdquo; documents help make clear the standards of the company&rsquo;s culture, for current employees, candidates, and customers alike. By making the abstract belief a concrete, tangible practice in work place, the belief becomes reality.</p>

<h2>Changing Hearts And Minds</h2>

<blockquote><p>&ldquo;Every behavior you see has been perfectly influenced by a world that was perfectly designed for this behavior to happen.&rdquo;</p></blockquote>

<p>When people make choices that we can&rsquo;t begin to understand, its important to remember that for the most part, we&rsquo;re simple creatures. We&rsquo;re motivated to act by the rewards and punishments of our environment. I&rsquo;m rewarded for writing code, posting funny pictures on Twitter, and making sure I vacuum up the hair my yellow dog sheds. I&rsquo;m punished for missing deadlines, depressing Twitter posts, or having my clothes covered with dog hair.</p>

<p>Those are obvious motivations, but there are others, more subtle and powerful carrots and sticks that influence our choices. To change behavior, you have to change the world that behavior exists in, and the structure that &ldquo;rewards&rdquo; or &ldquo;punishes&rdquo; an individual&rsquo;s choices.</p>

<p>So what are some of the influences on behavior?</p>

<table>
<thead>
<tr>
<th></th>
<th align="left">                       </th>
<th align="left">                                                   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Personal Motivation   </td>
<td align="left"> Why should someone care to behave a specific way? </td>
</tr>
<tr>
<td></td>
<td align="left"> Personal Ability      </td>
<td align="left"> Can they literally do it?                         </td>
</tr>
<tr>
<td></td>
<td align="left"> Social Motivation     </td>
<td align="left"> Is there peer pressure push for this behavior?    </td>
</tr>
<tr>
<td></td>
<td align="left"> Social Ability        </td>
<td align="left"> Do people around me support my behavior and help me out with it when I need help? </td>
</tr>
<tr>
<td></td>
<td align="left"> Structural Motivation </td>
<td align="left"> Are there rewards/punishments for good/bad behavior? </td>
</tr>
<tr>
<td></td>
<td align="left"> Structural Ability    </td>
<td align="left"> Does the physical environment support this behavior? </td>
</tr>
</tbody>
</table>


<p><em>(table via <a href="http://www.amazon.com/exec/obidos/ASIN/007148499X">Influencer: The Power to Change Anything</a>)</em></p>

<p>For ourselves as individuals, we have the most control over the first two items. We can identify within ourselves whether or not the Personal Motivation for success is present, and can develop the Personal Ability to honestly evaluate ourselves. When we&rsquo;re trying to understand why someone is resistant to change, considering these forces can help us identify how to best support someone who is struggling with a shift in culture.</p>

<h2>Make It Happen</h2>

<p>We can&rsquo;t just write a mission statement or do a few trust falls and somehow magically have a group of people, with diverse backgrounds and experiences, gel into a team. We can&rsquo;t call someone in from the outside, to <strong>tell</strong> us who we are. We generally agree with the big statements about team culture, things like &ldquo;honesty,&rdquo; &ldquo;respect,&rdquo; and &ldquo;openness.&rdquo; By turning these into concrete, actionable behavior, we can begin to actually created a shared culture, by communicating expectations and beliefs. We can discover biases and fallacies in how we interact with our peers, create lines of dialogue to empower everyone to be fully contributing members of the group, and create a company culture more enduring than beer kegs and ping pong tables &ndash; teams of like-minded individuals working together, with respect and harmony, towards common goals. Its entirely possible, and it all begins with a simple conversation. Get started.</p>

<h2>Bibliography</h2>

<p><a href="http://www.amazon.com/exec/obidos/ASIN/007148499X">Influencer: The Power to Change Anything</a> &ndash; Kerry Patterson, Joseph Grenny, David Maxfield</p>

<p><a href="http://www.amazon.com/Behind-Closed-Doors-Management-Programmers/dp/0976694026">Behind Closed Doors: Secrets of Great Management</a> &ndash; Esther Derby, Johanna Rothman</p>

<p><a href="http://www.amazon.com/Beautiful-Teams-Inspiring-Cautionary-Veteran/dp/0596518021">Beautiful Teams: Inspiring and Cautionary Tales from Veteran Team Leaders</a> &ndash; Andrew Stellman, Jennifer Greene</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Magic 201: Blocks]]></title>
    <link href="http://kerrizor.com/blog/2014/05/01/ruby-magic-201-blocks/"/>
    <updated>2014-05-01T16:54:59-07:00</updated>
    <id>http://kerrizor.com/blog/2014/05/01/ruby-magic-201-blocks</id>
    <content type="html"><![CDATA[<p>Blocks are not a unique features of Ruby, but they&rsquo;re one that many people talk about (and more people use without realizing it!) What is a block?</p>

<!-- more -->


<blockquote><p>A section of code which is grouped together.</p></blockquote>

<p>Zzzzz&hellip;.</p>

<p>A block is a piece of code that is not executed immediately, but is stored in a variable or passed to a method, and is potentially executed at a later moment in time.</p>

<p>Sound complicated? Let&rsquo;s look at some Ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="o">+</span><span class="mi">5</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty simple. Now let&rsquo;s try it with variables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, what if we wanted to store this behavior, of <code>a + b</code>? Well, we could write a method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">006</span><span class="o">?&gt;</span>   <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">007</span><span class="o">?&gt;</span>   <span class="k">end</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s ok, but there&rsquo;s an easier way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">add</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="p">}</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Proc:0x0000010363fa48@(irb):9 (lambda)&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="n">add</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>Questions to Ponder:</strong> What&rsquo;s the difference? When would one be more useful or appropriate?</p></blockquote>

<p>Not to confuse you, but let me show you another way you might see this formatted. The following two lines of code work identically.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">add</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="p">}</span>
</span><span class='line'><span class="n">add</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second format is referred to as a <strong>stabby lambda</strong> and you may see it from time to time.</p>

<h2>Why would I need this?</h2>

<p>Would you believe you&rsquo;ve already been using them without knowing it? Take this bit of Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span><span class="o">.</span><span class="n">odd?</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, <code>{ |n| n.odd? }</code> is a block! We&rsquo;re passing it in to <code>.select</code> (a method from the Enumerable module) which loops over each element in the Array and uses the block to determine what to return.</p>

<p>Here&rsquo;s another use of a block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>  <span class="n">n</span><span class="o">.</span><span class="n">odd?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Different format, same output.</p>

<blockquote><p><strong>Questions to Ponder:</strong> Why would you use <code>{}</code> versus <code>do/end</code>? If they&rsquo;re functionally the same, what might using one over another tell someone else about the code?</p></blockquote>

<p>If I were to rewrite <code>.select</code> in Ruby, it might look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">KerriEnumerable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">k_each</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">length</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">yield</span><span class="p">(</span><span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">k_select</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">k_each</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">e</span> <span class="k">if</span> <span class="k">yield</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">output</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Copying this into IRB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">01</span><span class="mi">8</span><span class="o">?&gt;</span> <span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">01</span><span class="mi">9</span><span class="o">?&gt;</span>   <span class="kp">include</span> <span class="no">KerriEnumerable</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">020</span><span class="o">?&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">021</span> <span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">k_select</span><span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span><span class="o">.</span><span class="n">odd?</span> <span class="p">}</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">022</span> <span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">k_select</span><span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span><span class="o">.</span><span class="n">even?</span> <span class="p">}</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">023</span> <span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">k_select</span><span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">n</span> <span class="p">}</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[]</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">024</span> <span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Working with blocks</h2>

<p>When using blocks, we usually only send one block at a time to a method. There are two ways to work with blocks &ndash; <code>yield</code> and <em>explicit blocks</em>.</p>

<h3>Yield</h3>

<p>You&rsquo;ve probably seen <code>yield</code> in Rails templates; it features prominently smack dab in the middle of most people&rsquo;s <code>app/views/layouts/application.erb.html</code>. <code>yield</code> is a <strong>keyword</strong> command (like <code>def</code> or <code>class</code>) and it tells Ruby to attempt to execute whatever block was passed to the current method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">calculator</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">yield</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="n">calculator</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">){</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span> <span class="p">}</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">9</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">calculator</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">){</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="p">}</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">20</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="n">calculator</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">){</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">a</span><span class="o">-</span><span class="n">b</span> <span class="p">}</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens if we don&rsquo;t pass a block in to <code>calculator</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span> <span class="p">:</span><span class="mo">011</span> <span class="o">&gt;</span> <span class="n">calculator</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="ss">LocalJumpError</span><span class="p">:</span> <span class="n">no</span> <span class="n">block</span> <span class="n">given</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span>
</span><span class='line'>    <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">6</span><span class="ss">:in</span> <span class="sb">`calculator&#39;</span>
</span><span class='line'><span class="sb">    from (irb):11</span>
</span><span class='line'><span class="sb">    from /Users/kerri/.rvm/rubies/ruby-2.0.0-p353/bin/irb:12:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>yield</code> is a little bit magical, as its actually breaking some of the object oriented rules underlying Ruby, but it has the advantage of being fast.</p>

<h3>Explicit Blocks</h3>

<p>Explicit Blocks, on the other hand, are slower. However, when using <code>yield</code> we&rsquo;re not being clear about what we&rsquo;re trying to do. With an explicit block, we&rsquo;re declaring an incoming method parameter to be a block, then executing on it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">calculator</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">calculation</span><span class="p">)</span>
</span><span class='line'>  <span class="n">calculation</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since <code>calculation</code> is an object (a Proc), rather than a magical keyword, we can interact with it and call methods on it. Often this is more practical.</p>

<h2>Resources</h2>

<p><a href="https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/18-blocks/lessons/51-new-lesson"><strong>RubyMonk &ndash; Blocks</strong></a></p>

<p>Interactive tutorial on blocks.</p>

<p><a href="http://verboselogging.com/2011/09/20/proc-block-and-two-smoking-lambdas"><strong>Proc, Block, and Two Smoking Lambdas</strong></a></p>

<p>A technical blog post from Daniel Huckstep about the difference between Procs, Blocks, and Lambdas.</p>

<p><a href="https://practicingruby.com/articles/building-enumerable-and-enumerator"><strong>Building Enumerable &amp; Enumerator in Ruby</strong></a></p>

<p>A great exercise if you have a couple hours and really want to learn this stuff!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion: An Example in Ruby]]></title>
    <link href="http://kerrizor.com/blog/2014/04/29/recursion-an-example-in-ruby/"/>
    <updated>2014-04-29T10:20:20-07:00</updated>
    <id>http://kerrizor.com/blog/2014/04/29/recursion-an-example-in-ruby</id>
    <content type="html"><![CDATA[<p>Recursion is most commonly defined as &ldquo;a process wherein a method can call themselves until they reach a goal.&rdquo;</p>

<!-- more -->


<p>We say that a method is &ldquo;recursive&rdquo; if it</p>

<ul>
<li>Has an end goal, or base case</li>
<li>Uses a process in which the task at hand is reduced towards that end goal</li>
</ul>


<h3>Divide and Conquer</h3>

<p>Recursion is useful as a way to divide a large problem into a smaller one. The most common way to explain recursion is to use it to calculate the factorial of a number. A factorial is the product of all positive integers less than or equal to the number. Therefor, the factorial of 5 is equal to 1<em>2</em>3<em>4</em>5.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;Can not calculate factorial of a negative number&quot;</span> <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method returns the factorial of a number by first checking to see if the number is negative. If the number is positive, and is greater than 1, we multiply that number times the factorial of the number immediately preceding it. We could represent this (in pseudo code) as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factorial</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">5</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, you can see that now we&rsquo;re calling <code>factorial(4)</code>, so we add this to the stack, and we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factorial</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">5</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">4</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It just keeps going:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factorial</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">5</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">4</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">3</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="mi">2</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;until we get to the condition where we would no longer call <code>factorial</code> &mdash; when we ask for the factorial of 1, which is 1. At that point, we&rsquo;ve hit the end, and we begin to return values for each call to the method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factorial</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">5</span> <span class="o">*</span> <span class="mi">24</span>
</span><span class='line'>    <span class="mi">4</span> <span class="o">*</span> <span class="mi">6</span>
</span><span class='line'>      <span class="mi">3</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>        <span class="mi">2</span> <span class="o">*</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Why is this better than a loop?</h2>

<p>Often its not. If you find yourself saying &ldquo;Geez, I wish I&rsquo;d used a loop here&rdquo; then you probably should. Sometimes, though, recursion is the best tool to use, and its the sort of solution that is worth learning, at least conceptually.</p>

<h2>Links</h2>

<ul>
<li><a href="http://ruby.bastardsbook.com/chapters/recursion/">A King And His Rocks</a></li>
<li><a href="http://vimeo.com/24716767">Ruby Recursion [VIDEO]</a></li>
<li><a href="http://inventwithpython.com/blog/2011/08/11/recursion-explained-with-the-flood-fill-algorithm-and-zombies-and-cats/">Flood Fill, Zombies, and Kittens</a></li>
<li><a href="http://kittykaraoke.tumblr.com/post/70391881556/fibonacci-with-memoization">Fibonacci</a></li>
<li><a href="http://www.codequizzes.com/topics/5/quizzes/7">CodeQuiz on Recursion</a></li>
</ul>


<h2>Projects</h2>

<p>(from <a href="http://www.theodinproject.com/courses/ruby-programming/lessons/recursion">The Odin Project</a>)</p>

<h3>Fibonnacci</h3>

<p>The Fibonacci Sequence, which sums each number with the one before it, is a great example of a problem that can be solved recursively.</p>

<h4>Your Task</h4>

<ul>
<li>Write a method #fibs which takes a number and returns that many members of the fibonacci sequence. Use iteration for this solution.</li>
<li>Now write another method #fibs_rec which solves the same problem recursively. This can be done in just 3 lines (or 1 if you&rsquo;re crazy).</li>
</ul>


<h3>Coin Flips</h3>

<p>How many different ways are there to flip a fair coin 5 times and not have three or more heads in a row? How about 10<sup>10</sup> times and not have 534 or more heads in a row?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building APIs]]></title>
    <link href="http://kerrizor.com/blog/2014/04/22/building-apis/"/>
    <updated>2014-04-22T15:19:20-07:00</updated>
    <id>http://kerrizor.com/blog/2014/04/22/building-apis</id>
    <content type="html"><![CDATA[<p><strong>API</strong> stands for <em>Application Programming Interface</em>, and it&rsquo;s one way for applications to communicate and share information with each other.<!-- more --> When one app talks to another, they don&rsquo;t need the same user interface and image and JavaScript bits &ndash; they just need to pass data or commands back and forth, so we use plain text and JSON to accomplish this.</p>

<h2>What is an API?</h2>

<p>In its most common usage, we&rsquo;re referring to the <strong>public API</strong> of an application. Typically a public API allows anonymous users, or individuals who are not privy to the internal operations of an application, access to some, but not all, kinds of data held by the application, and to give the application a certain subset of commands. If we were working with the Twitter API, we might use it to implement the following features:</p>

<ul>
<li>fetch a user&rsquo;s followers</li>
<li>favorite a tweet</li>
<li>block a user from appearing on your timeline</li>
</ul>


<p>These are all examples of working with a public API. A software company opens its API to the public so that other software developers can build applications that are powered by its service.</p>

<h3>Internal APIs</h3>

<p>Imagine each class in your application as a separate application, a collection of individual little programs sending messages back and forth, asking each other to execute certain commands. This is the perspective most senior developers and those concerned with <strong>application architecture</strong> take towards the code. At this scale, we refer to the public methods of a class as that class&rsquo;s API. This view can help us identify the seams between different classes, where one class&rsquo;s responsibilities end and another&rsquo;s begin.</p>

<h3>Ask &ldquo;What does the user want to do?&rdquo;</h3>

<p>One of the more common failure of APIs is to simply expose the inner workings of models or controllers. Often this leads forcing users to understand the inner complexities, tangled dependencies, and specialized terminology of your particular application.</p>

<p>We can avoid this problem by asking from the very first, &ldquo;What does the user want to do?&rdquo; By putting ourselves into their shoes, working to question the assumptions and vocabulary of our audience, we can craft friendly, usable APIs that can lead to more interesting implementations than APIs that are artificially limiting their use cases through poor design.</p>

<h2>Building Your API</h2>

<p>Although its not 100% obvious, your Rails application is already an API. One application &mdash; your web browser &mdash; makes a request for some information. Rails generates a response that consists of HTML, and sends that data back to the browser. Its the <em>browser</em> that handles all the rendering and layout business.</p>

<p>Typically, our Rails APIs will strive to be RESTful, and return data formated as JSON. There are other valid formats, of course &ndash; XML is common in some use cases &ndash; but we&rsquo;ll be focusing on JSON for this.</p>

<p>When want a Rails app to return JSON instead of HTML, its fairly easy to tell the controller to do so. The same controller action can return different formats depending on whether your user is making a request from a browser or an API call from JavaScript. By default, Rails assumes you want HTML, but the app can determine which type of request is being made based on the extension.</p>

<p>Let&rsquo;s take a look at this with <a href="https://github.com/Ada-Developers-Academy/band_practice">band_practice</a> demo app. From the command line, we&rsquo;ll use <em>curl</em> to fetch the <code>#show</code> action for the Singles controller:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># returns HTML by default
</span><span class='line'>$ curl http://localhost:3000/singles/1</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the result in our log:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Started GET "/singles/1" for 127.0.0.1 at 2014-04-04 10:53:57 -0700
</span><span class='line'>Processing by SinglesController#show as HTML</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s make the same request, but append <code>.json</code> to the the URL.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># same controller and action, asking for JSON
</span><span class='line'>$ curl http://localhost:3000/singles/1.json</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the result in our log for the JSON request:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Started GET "/singles/1.json" for 127.0.0.1 at 2014-04-04 10:57:03 -0700
</span><span class='line'>Processing by SinglesController#show as JSON</span></code></pre></td></tr></table></div></figure>


<h2>Rendering HTML, JSON, and XML</h2>

<p>Adding the ability to render different response formats is a simple thing to add to our controller. We accomplish this by using the <code>responds_to</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SinglesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">title</span><span class="p">:</span>  <span class="vi">@single</span><span class="o">.</span><span class="n">title</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">artist</span><span class="p">:</span> <span class="vi">@single</span><span class="o">.</span><span class="n">artist</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">release_date</span><span class="p">:</span> <span class="vi">@single</span><span class="o">.</span><span class="n">release_date</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="n">response</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">xml</span><span class="p">:</span> <span class="n">response</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>respond_to</code> passes a format object to the block, to which we assign various rendering options. Notice that we don&rsquo;t have to do anything for HTML, as Rails automatically knows to render the default template, however we <em>could</em> specify different behavior if we had a reason to.</p>

<p>We&rsquo;re using the <code>render</code> function to define what our response will look like. It is aware of a wide range of formats. When you pass it the key :json, it will call #to_json on the value, in this case our hash of specific attributes from the <code>@single</code> object. We could have simply passed it the <code>@single</code> object itself, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@single</span> <span class="p">}</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">xml</span><span class="p">:</span> <span class="vi">@single</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doing so would have transformed the object into a JSON hash, with attribute names as the keys and the value of the attributes as the values in the JSON.</p>

<h2>Response Codes</h2>

<p>We&rsquo;ve built a simple API that responds with some data. We could let the consumer of our API parse that data to figure out if their request was successful or if there was an error of some sort, but that seems like cumbersome for them. Instead, we can use HTTP status codes to provide a quick and easy way for our API&rsquo;s users to see the status of their request.</p>

<p>To set status code in your controller, just pass <code>:status</code> to our render method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@single</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:success</span> <span class="p">}</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">xml</span><span class="p">:</span> <span class="vi">@single</span><span class="p">,</span>  <span class="ss">status</span><span class="p">:</span> <span class="mi">200</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice in the example above, I used both <code>:success</code> as well as the official numeric value of 200 to inform the consumer that the request was a success. I tend to use the built-in Rails symbols for this, as they&rsquo;re more explicit, however its good to know at least the most common HTTP status codes.</p>

<ul>
<li>200 &ndash; :ok</li>
<li>204 &ndash; :no_content</li>
<li>301 &ndash; :moved_permanently</li>
<li>400 &ndash; :bad_request</li>
<li>403 &ndash; :forbidden</li>
<li>401 &ndash; :unauthorized</li>
<li>404 &ndash; :not_found</li>
<li>410 &ndash; :gone</li>
<li>422 &ndash; :unprocessable_entity</li>
<li>500 &ndash; :internal_server_error</li>
</ul>


<h3>Magic!</h3>

<p>Just like that, we&rsquo;ve built a very simple API. Naturally, it can get quite a bit more complicated, but this is basically all there is to it. See the resources listed below for further details.</p>

<h2>Resources</h2>

<p><a href="http://www.theodinproject.com/ruby-on-rails/apis-and-building-your-own">API Basics and Building Your Own</a></p>

<p><a href="http://www.amberbit.com/blog/2014/2/19/building-and-documenting-api-in-rails/">Building and documenting API in Rails</a></p>

<p><a href="http://mt.gomiso.com/2011/06/27/building-a-platform-api-on-rails/">Building a Platform API on Rails</a></p>

<p><a href="http://futureshock-ed.com/2011/03/04/http-status-code-symbols-for-rails/">HTTP status code symbols for Rails</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CarrierWave and S3]]></title>
    <link href="http://kerrizor.com/blog/2014/04/13/carrierwave-and-s3/"/>
    <updated>2014-04-13T15:13:22-07:00</updated>
    <id>http://kerrizor.com/blog/2014/04/13/carrierwave-and-s3</id>
    <content type="html"><![CDATA[<p>CarrierWave is a gem that adds a fairly simple and flexible way to users to upload files to our Rails application. <!-- more --> It also lets us resize images to make thumbnails and other sizes as we need them, and lets us upload all these uploaded (and generated) files to cloud storage products, such as S3.</p>

<h2>How-to</h2>

<h3>Make an S3 bucket</h3>

<p>S3 &mdash; Simple Storage Service
&ldquo;buckets&rdquo; are like folders</p>

<p>Let&rsquo;s start with a new Rails app</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails new band_practice
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>band_practice
</span><span class='line'><span class="nv">$ </span>rails g scaffold band name genre
</span><span class='line'><span class="nv">$ </span>rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<h3>Setup CarrierWave and Fog Gems</h3>

<p>Fog is a gem that helps us work with <em>cloud services</em> like those from Amazon &ndash; EC2 or S3 &ndash; as well as cloud offerings from other companies (like Microsoft, Rackspace, Blue Box, etc).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;carrierwave&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;fog&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;figaro&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Might as well set up Figaro now, too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="ss">figaro</span><span class="p">:</span><span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Add An Uploader</h3>

<p>Now you need a uploader. This is the file which has all the settings like which folder the image will be saved, setting the image quality, caching etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails g uploader image
</span></code></pre></td></tr></table></div></figure>


<p>The generator creates a new directory called <code>uploaders</code> under the <code>app</code> directory and in it a file called <code>image_uploader.rb</code>. In this file are a number of comments explaining how to customize the uploader. For example there is code to change the upload location, perform processing on the image after uploading and to restrict the type of files that can be uploaded. You should take a look at these options on your own, but for demonstration purposes we&rsquo;re going to get rid of most of it in favor of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ImageUploader</span> <span class="o">&lt;</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:MiniMagick</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">store_dir</span>
</span><span class='line'>    <span class="s2">&quot;uploads/</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">mounted_as</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:thumb</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_fit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:preview</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_fit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">256</span><span class="p">,</span> <span class="mi">256</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:full</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_fit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">2048</span><span class="p">,</span> <span class="mi">2048</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we&rsquo;ll need to add the uploader to the <code>Band</code> model. We&rsquo;ll need a column in the bands table to store it in so we&rsquo;ll generate a migration to do add it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="nv">$ </span>rails g migration add_image_to_bands image:string
</span><span class='line'> <span class="nv">$ </span>rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<p>Then, we <em>mount</em> the uploader on the <code>Band</code> model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Band</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">mount_uploader</span> <span class="ss">:image</span><span class="p">,</span> <span class="no">ImageUploader</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add a <code>file_field</code> to the Band form.</p>

<p>app/views/bands/_form.html.erb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= f.label :image %&gt;&lt;br&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">file_field</span> <span class="ss">:image</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We add <code>:image</code> to the strong params for the controller.</p>

<p>app/controllers/bands_controller.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">band_params</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:band</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:genre</span><span class="p">,</span> <span class="ss">:image</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we modify the scaffolded form and show pages to include a form element for the image upload, and modify the <code>form_for</code> to add an <code>:html</code> option.</p>

<p>apps/views/bands/show.html.erb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="n">image_tag</span> <span class="vi">@band</span><span class="o">.</span><span class="n">image_url</span><span class="o">.</span><span class="n">to_s</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can upload images &ndash; yay! In your terminal, take a look at <code>public/uploads</code> &ndash; <code>mini_magick</code> and <code>carrierwave</code> made all those files for us! We have access to these different sizes by passing the symbol of the size (as defined in our uploader model) to <code>#image_url</code></p>

<p>app/views/bands/show.html.erb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="n">image_tag</span> <span class="vi">@band</span><span class="o">.</span><span class="n">image_url</span><span class="p">(</span><span class="ss">:thumb</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Uploading to S3</h2>

<p>This is cool, but we want to save to S3 instead of the local file system. This is pretty easy. First, we need to tell CarrierWave that we want to use S3. Make a new initializer, <code>config/initializers/carrierwave.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CarrierWave</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_credentials</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">provider</span><span class="p">:</span>               <span class="s1">&#39;AWS&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span><span class="p">:</span>      <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_KEY&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span><span class="p">:</span>  <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_SECRET&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># For testing, upload files to local `tmp` folder.</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">test?</span> <span class="o">||</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">cucumber?</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">storage</span>           <span class="o">=</span> <span class="ss">:file</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">enable_processing</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">root</span>              <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/tmp&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">storage</span> <span class="o">=</span> <span class="ss">:fog</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">cache_dir</span>        <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/tmp/uploads&quot;</span> <span class="c1"># To let CarrierWave work on Heroku</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span>    <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET_NAME&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need to fill out our <code>config/application.yml</code> file. We can get the secret information from the <em>Security Credentials</em> screen in the AWS dashboard &ndash; I won&rsquo;t go into how to fetch this information here, as its likely to change from time to time.</p>

<h2>Resources</h2>

<p><a href="http://railscasts.com/episodes/253-carrierwave-file-uploads?view=asciicast">Railscasts #253 CarrierWave File Uploads</a></p>

<p><a href="http://railscasts.com/episodes/383-uploading-to-amazon-s3?view=asciicast">Railscasts #383 Uploading to Amazon S3</a></p>

<p><a href="http://richonrails.com/articles/allowing-file-uploads-with-carrierwave">Allowing File Uploads with CarrierWave</a></p>

<p><a href="http://www.javahabit.com/2012/06/03/saving-files-in-amazon-s3-using-carrierwave-and-fog-gem/">Saving files in Amazon S3 using CarrierWave and Fog Gem</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair Programming Peanut Butter and Jelly Sandwiches]]></title>
    <link href="http://kerrizor.com/blog/2014/04/12/pair-programming-peanut-butter-and-jelly-sandwiches/"/>
    <updated>2014-04-12T09:40:33-07:00</updated>
    <id>http://kerrizor.com/blog/2014/04/12/pair-programming-peanut-butter-and-jelly-sandwiches</id>
    <content type="html"><![CDATA[<p>For this activity, pairs will work together to make a peanut butter and jelly sandwich. <!-- more --> One person will give instructions on how to make the sandwich while the other is tasked with carrying out those instructions. The one giving instructions can not touch the ingredients or tools, and the one receiving instructions can not speak back.</p>

<p>When one half of the sandwich is complete (or when you deem it time), switch roles. When the sandwich is completely assembled, switch roles again and proceed to cut the sandwich in half.</p>

<h3>For the Instruction Giver</h3>

<p>When listing the steps in your procedure, you should assume the person following your instructions is as &ldquo;dumb&rdquo; as a computer (IE &mdash; someone unfamiliar with making a sandwich, like an alien from another planet.)</p>

<h3>For the Instruction Receiver</h3>

<p>When following the instructions, interpret them as literally as possible. Messes are acceptable (even expected!)</p>

<h2>Assumptions</h2>

<p>While a computer has no &ldquo;common sense&rdquo; that would allow it to correctly guess your intent, we can assume a certain knowledge of these basic actions:</p>

<ul>
<li>open any container</li>
<li>close any container</li>
<li>hold a thing</li>
<li>pick up a thing</li>
<li>put a thing down</li>
<li>spread a condiment</li>
</ul>


<p>What we&rsquo;re missing is timing, amounts, and other interactive qualities. For example, we can say &ldquo;spread the jelly&rdquo; and assume the Receiver knows how to work their muscles, but will continue to &ldquo;spread the jelly&rdquo; all over everything within arms reach unless or until given a condition to cease.</p>

<h2>Goals</h2>

<ul>
<li>explore pair communication skills</li>
<li>expose communication assumptions</li>
<li>practice expressing commands in an explicit manner</li>
</ul>


<h2>Extending The Exercise</h2>

<ul>
<li>blindfold the Receiver, such that the Instruction Giver has to be more explicit with positional information and conditional checking</li>
<li>have the Instruction Giver stand with their back to the Receiver, so that they can not see the sandwich being assembled</li>
<li>have an instructor act as a Product Owner, who can be questioned about any aspect of the sandwich making process, and who can reject the sandwich for any of the following:

<ul>
<li>wrong kind of

<ul>
<li>peanut butter</li>
<li>jelly</li>
<li>bread</li>
</ul>
</li>
<li>incorrectly cut</li>
<li>insufficient amount of condiment</li>
<li>overabundance of condiment</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Quick Intro to MongoDB in Rails]]></title>
    <link href="http://kerrizor.com/blog/2014/04/02/quick-intro-to-mongodb-in-rails/"/>
    <updated>2014-04-02T17:04:33-07:00</updated>
    <id>http://kerrizor.com/blog/2014/04/02/quick-intro-to-mongodb-in-rails</id>
    <content type="html"><![CDATA[<p>By Internet standards, MongoDB is a venerable NoSQL database. <!-- more -->First introduced in 2009, it was designed as a scalable document storage engine. In Mongo, we don&rsquo;t work with tables and rows, we work with <strong>collections</strong> and <strong>documents</strong>. Documents contain JSON/BSON hashes, so any data that can be represented as a hash can be stored in Mongo. Mongo is a <strong>schemaless</strong> database, meaning there&rsquo;s no requirements nor enforcement about the structure of the data in a document.</p>

<p>Mongo is able to handle massive data sets quickly and efficiently, and is used by many big data organizations, including Foursquare, bit.ly, and CERN for collecting Large Hadron Collider data.</p>

<h2>Installation</h2>

<p>This is fairly straight forward using homebrew.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">brew</span> <span class="n">install</span> <span class="n">mongodb</span>
</span></code></pre></td></tr></table></div></figure>


<p>When it finishes, it will print out some information on setting up Mongo to start whenever you start your computer. I&rsquo;m not a huge fan of that. Here&rsquo;s what I use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">brew</span> <span class="n">services</span> <span class="n">start</span> <span class="n">mongodb</span>
</span></code></pre></td></tr></table></div></figure>


<p>..and to stop it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">brew</span> <span class="n">services</span> <span class="n">stop</span> <span class="n">mongodb</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mongo and Rails</h2>

<p>Let&rsquo;s make a new Rails application, but specify that we do NOT want Active Record installed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="kp">new</span> <span class="n">mongo</span><span class="o">-</span><span class="n">people</span> <span class="o">--</span><span class="n">skip</span><span class="o">-</span><span class="n">active</span><span class="o">-</span><span class="n">record</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>cd</code> into the project, and edit the Gemfile, add this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;mongoid&quot;</span><span class="p">,</span> <span class="ss">git</span><span class="p">:</span> <span class="s1">&#39;git://github.com/mongoid/mongoid.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save, and then run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just as when using a relational DB such as SQLite, Postgres, or MySQL, we need a configuration file. Mongoid installs a custom Rails generator for us. Run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">generate</span> <span class="ss">mongoid</span><span class="p">:</span><span class="n">config</span>
</span></code></pre></td></tr></table></div></figure>


<p>Open up the file it creates, located at <code>config/mongoid.yml</code> and take a look. Take note of the different options we <em>could</em> configure. Don&rsquo;t make any changes at this time; its enough to just take a look at what the generator created on our behalf.</p>

<p>At this point, I like to run <code>rails s</code> and make sure the server starts, that everything is all hunkey-dorey. Once you&rsquo;ve checked in a browser that Rails is at least starting up correctly, let&rsquo;s make a new git repo and check in what we&rsquo;ve got so far.</p>

<p>Let&rsquo;s get started. Since this is a demonstration, let&rsquo;s cheat a little bit and use Rails&#8217; scaffolding generators to get us started.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">generate</span> <span class="n">scaffold</span> <span class="n">person</span> <span class="nb">name</span> <span class="n">street</span> <span class="n">city</span> <span class="n">state</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use <code>git status</code> to see what the command generated. It should all look pretty normal.. but let&rsquo;s take a look at the model it generated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:street</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:city</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:state</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quite different! MongoDB doesn&rsquo;t have a database schema, so no database migrations are needed. If we want a new field, we could just declare one in the model and add it to our views. Migrations are occasionally used, but they&rsquo;re for data migration or transformation, not changing the structure of the database.</p>

<p>Let&rsquo;s fire up our Rails server and visit the scaffolded route (at <code>http://localhost:3000/people</code>) There we see the vanilla Rails CRUD forms. Let&rsquo;s add a person.. and look at the URL in the show page &ndash; weird! We&rsquo;re used to seeing incrementing IDs created for us by the database. Each row that is added to the table increments the row counter by exactly 1, so we might say that each row has a locally unique sequential identifier.</p>

<p>MongoDB uses these weird looking hashes of alphanumerics like &ldquo;532e2ba7546f6c30aa000000&rdquo;. This <strong>Object ID</strong> is always 12 bytes, composed of a timestamp, client machine id, client process id, and a 3-byte incremented counter.</p>

<h2>Documents</h2>

<p>Let&rsquo;s take a look at what a document looks like.</p>

<p>You may have seen command line interfaces for PostgreSQL, so it shouldn&rsquo;t come as a shock that MongoDB offers one as well. In a terminal window:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">mongo</span> <span class="n">mongo_people_development</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that I found the name of our database by looking at <code>config/mongoid.yml</code>.</p>

<p>Mongo uses its own special command language for working with its data. If you get stuck, just type <code>help</code>.</p>

<p>First, let&rsquo;s take a look at the collections in this database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span><span class="nx">show</span> <span class="nx">collections</span>
</span><span class='line'><span class="nx">people</span>
</span><span class='line'><span class="nx">system</span><span class="p">.</span><span class="nx">indexes</span>
</span><span class='line'><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To find a record, the format is <code>db.[collection].find()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">people</span><span class="p">.</span><span class="nx">find</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;532e2ba7546f6c30aa000000&quot;</span><span class="p">),</span> <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Kerri Miller&quot;</span><span class="p">,</span> <span class="s2">&quot;street&quot;</span> <span class="o">:</span> <span class="s2">&quot;123 Main Street&quot;</span><span class="p">,</span> <span class="s2">&quot;city&quot;</span> <span class="o">:</span> <span class="s2">&quot;SEATTLE&quot;</span><span class="p">,</span> <span class="s2">&quot;state&quot;</span> <span class="o">:</span> <span class="s2">&quot;WA&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">people</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="s2">&quot;state&quot;</span><span class="o">:</span><span class="s2">&quot;WA&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">{</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;532e2ba7546f6c30aa000000&quot;</span><span class="p">),</span> <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Kerri Miller&quot;</span><span class="p">,</span> <span class="s2">&quot;street&quot;</span> <span class="o">:</span> <span class="s2">&quot;123 Main Street&quot;</span><span class="p">,</span> <span class="s2">&quot;city&quot;</span> <span class="o">:</span> <span class="s2">&quot;SEATTLE&quot;</span><span class="p">,</span> <span class="s2">&quot;state&quot;</span> <span class="o">:</span> <span class="s2">&quot;WA&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the first command returned ALL documents in the collection, we just happened to only have one document, so that&rsquo;s all that was returned.</p>

<p>Remember when I said that MongoDB stores everything as JSON? Mongo actually uses JavaScript here in the command line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span> <span class="nx">db</span>
</span><span class='line'><span class="nx">object</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span> <span class="nx">db</span><span class="p">.</span><span class="nx">people</span>
</span><span class='line'><span class="nx">object</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span> <span class="nx">db</span><span class="p">.</span><span class="nx">people</span><span class="p">.</span><span class="nx">find</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">function</span>
</span><span class='line'><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we want to see what the code for a Mongo command looks like, we can call the function without parenthesis.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">people</span><span class="p">.</span><span class="nx">find</span>
</span><span class='line'><span class="kd">function</span> <span class="p">(</span> <span class="nx">query</span> <span class="p">,</span> <span class="nx">fields</span> <span class="p">,</span> <span class="nx">limit</span> <span class="p">,</span> <span class="nx">skip</span><span class="p">,</span> <span class="nx">batchSize</span><span class="p">,</span> <span class="nx">options</span> <span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cursor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DBQuery</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">_mongo</span> <span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_db</span> <span class="p">,</span> <span class="k">this</span> <span class="p">,</span>
</span><span class='line'>                        <span class="k">this</span><span class="p">.</span><span class="nx">_fullName</span> <span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_massageObject</span><span class="p">(</span> <span class="nx">query</span> <span class="p">)</span> <span class="p">,</span> <span class="nx">fields</span> <span class="p">,</span> <span class="nx">limit</span> <span class="p">,</span> <span class="nx">skip</span> <span class="p">,</span> <span class="nx">batchSize</span> <span class="p">,</span> <span class="nx">options</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">getQueryOptions</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">connObj</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getMongo</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">readPrefMode</span> <span class="o">=</span> <span class="nx">connObj</span><span class="p">.</span><span class="nx">getReadPrefMode</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">readPrefMode</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">cursor</span><span class="p">.</span><span class="nx">readPref</span><span class="p">(</span><span class="nx">readPrefMode</span><span class="p">,</span> <span class="nx">connObj</span><span class="p">.</span><span class="nx">getReadPrefTagSet</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">cursor</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping Up</h2>

<h3>Why MongoDB?</h3>

<p>MongoDB is designed to be highly-scalable and flexible, but remain familiar enough that application developers could use it easily. Working with Mongo is mostly the same as working with a traditional RDBMS (except for being unable to do server-side JOINs between two sets of data..)</p>

<p>Because it can&rsquo;t do server-side JOINs, the relationships between different objects (Users have Posts, Posts have Comments, Comments have Users) can be tricky, as you need to set up those relationships in the model.</p>

<h3>Why not MongoDB?</h3>

<p>How MongoDB encourages denormalization of schemas (by not having any) might be a little too much for some to swallow. Some developers find the cold, hard constraints of a relational database reassuring.</p>

<p>Although sometimes restrictive, a database schema and the restraints it places on our data can be reassuring and useful. While MongoDB offers a huge increase in scalability and speed of record retrieval, its inability to relate documents from 2 different collections &mdash; the key strength of a RDBMS &mdash; makes it often not the best case for a CRUD-focused web application.</p>

<p>Because MongoDB is focused on large datasets, it works best in large clusters, which can be a pain to design and manage.</p>

<h2>Resources</h2>

<p><strong>Why I think Mongo is to Databases what Rails was to Frameworks</strong></p>

<p>Meaty blog post from John Nunemaker on why you should use MongoDB
<a href="http://www.railstips.org/blog/archives/2009/12/18/why-i-think-mongo-is-to-databases-what-rails-was-to-frameworks/">http://www.railstips.org/blog/archives/2009/12/18/why-i-think-mongo-is-to-databases-what-rails-was-to-frameworks/</a></p>

<p><strong>Why you should never use MongoDB</strong></p>

<p>Lengthy blog post by Sarah Mei on the Discourse project&rsquo;s use of MongoDB, and why they ultimately migrated to PostgreSQL. The comments are actually worth reading.
<a href="http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/">http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/</a></p>

<p><strong>Mongoid Gem</strong></p>

<p>Good documentation about working with MongoDB from a Ruby and RoR perspective
<a href="http://mongoid.org/en/mongoid/">http://mongoid.org/en/mongoid/</a></p>

<p><strong>Railscast on Mongoid</strong></p>

<p><a href="http://railscasts.com/episodes/238-mongoid">http://railscasts.com/episodes/238-mongoid</a></p>

<p><strong>Railscast on MongoDB</strong></p>

<p>This one is a bit dated but worth a read-through.
<a href="http://railscasts.com/episodes/194-mongodb-and-mongomapper">http://railscasts.com/episodes/194-mongodb-and-mongomapper</a></p>

<p><strong>Devise with Mondoid</strong></p>

<p><a href="http://railsapps.github.io/tutorial-rails-mongoid-devise.html">http://railsapps.github.io/tutorial-rails-mongoid-devise.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Internationalization (I18n)]]></title>
    <link href="http://kerrizor.com/blog/2014/03/31/rails-internationalization-i18n/"/>
    <updated>2014-03-31T12:01:32-07:00</updated>
    <id>http://kerrizor.com/blog/2014/03/31/rails-internationalization-i18n</id>
    <content type="html"><![CDATA[<p>Rails by default installs support for internationalization (or <em>I18n</em>) through the gem <code>i18n</code>. This gem add support for multiple language dictionaries and translation files, to let you easily change the language your site displays.</p>

<!-- more -->


<p>As you can imagine, I18n is a complex problem, since human languages differ in so many ways (pluralization, grammar, etc.) The Rails I18n API isn&rsquo;t perfect, but it does a fairly good job focusing on supporting English and other similar languages, and provides a framework to add support for languages that fall outside the paradigm of those (Japanese, Tagalog, or Hebrew, for example.)</p>

<h2>Getting Started</h2>

<p>Let&rsquo;s build a new Rails app and create a simple &ldquo;hello world&rdquo; page.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails new i18n_demo
</span><span class='line'>$ cd i18n_demo
</span><span class='line'>$ rails g controller welcome</span></code></pre></td></tr></table></div></figure>


<p>I add a simple <code>views/welcome/index.html.erb</code> template, and we get a page that says &ldquo;Hello World&rdquo;. Now, let&rsquo;s use a translation dictionary to render this string.</p>

<p><em>welcome.html.erb</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">t</span><span class="p">(</span><span class="ss">:hello</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p><em>config/locales/en.yml</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">en</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hello</span><span class="p-Indicator">:</span> <span class="s">&quot;Hello</span><span class="nv"> </span><span class="s">world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We reload the page, and magic! Rails loads the string from the translation file.</p>

<p>Let&rsquo;s set this app up to give us this page in French. First, let&rsquo;s make a new translations file:</p>

<p><em>config/locales/fr.yml</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">fr</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hello</span><span class="p-Indicator">:</span> <span class="s">&quot;Bonjour!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a variety of ways to tell our Rails application we want to change from the default language (which is English.) For the purposes of this demonstration, we&rsquo;ll use a simple query string.</p>

<p><em>app/controllers/application_controller.rb</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_action</span> <span class="ss">:set_locale</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">set_locale</span>
</span><span class='line'>  <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:locale</span><span class="o">]</span> <span class="o">||</span> <span class="no">I18n</span><span class="o">.</span><span class="n">default_locale</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s restart our server, and append <code>?locale=fr</code> to our URL and see what happens.</p>

<p>Awesome!</p>

<p>We could define a translation file for any language; we&rsquo;re not limited to just the 2 letter language abbreviations!</p>

<p><em>config/locales/pirate.yml</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">pirate</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hello</span><span class="p-Indicator">:</span> <span class="s">&quot;Ahoy</span><span class="nv"> </span><span class="s">mateys!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By starting with I18n early in an app, its fairly easy to add new language support to your application. Generally its a matter of taking an existing translations file and sending it to a translator to interpret the strings for you, then adding it to your repo.</p>

<p>Of course, nothing is ever that simple.</p>

<h2>Interpolation</h2>

<p>What if we wanted to greet a user by name?</p>

<p><em>config/locales/en.yml</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">en</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hello_name</span><span class="p-Indicator">:</span> <span class="s">&#39;Hello,</span><span class="nv"> </span><span class="s">%{name}!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>app/views/welcome/index.html.erb</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">t</span><span class="p">(</span><span class="ss">:hello_name</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Kerri&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re just putting a string in here, but it could easily be a value from an object. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">t</span><span class="p">(</span><span class="ss">:hello_name</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="n">current_user</span><span class="o">.</span><span class="n">name</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>While this solution generally works fine, you may be able to already see how this is potentially a sticky situation, depending on the language!</p>

<h2>Pluralization</h2>

<p>The other situation that comes up that causes some problems is pluralization.</p>

<p><em>config/locales/en.yml</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">inbox</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">zero</span><span class="p-Indicator">:</span> <span class="s">&#39;You</span><span class="nv"> </span><span class="s">have</span><span class="nv"> </span><span class="s">no</span><span class="nv"> </span><span class="s">messages&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">one</span><span class="p-Indicator">:</span> <span class="s">&#39;You</span><span class="nv"> </span><span class="s">have</span><span class="nv"> </span><span class="s">one</span><span class="nv"> </span><span class="s">message&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">other</span><span class="p-Indicator">:</span> <span class="s">&#39;You</span><span class="nv"> </span><span class="s">have</span><span class="nv"> </span><span class="s">%{count}</span><span class="nv"> </span><span class="s">messages&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>app/views/welcome/index.html.erb</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">t</span><span class="p">(</span><span class="ss">:inbox</span><span class="p">,</span> <span class="ss">count</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Magic!</p>

<h2>Resources</h2>

<p><a href="http://guides.rubyonrails.org/i18n.html">Rails Guides &ndash; I18N</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practice Makes Perfect]]></title>
    <link href="http://kerrizor.com/blog/2013/08/02/practice-makes-perfect/"/>
    <updated>2013-08-02T14:58:00-07:00</updated>
    <id>http://kerrizor.com/blog/2013/08/02/practice-makes-perfect</id>
    <content type="html"><![CDATA[<p><em>This post originally appeared on the <a href="http://www.bluebox.net/about/blog/2012/06/practice-make-perfect/">Blue Box blog</a></em></p>

<p>Contrary to popular belief, there is no such thing as “on the job training.” The skills that differentiate senior and lead developers from the herd don’t come from sheer number hours spent simply doing the job. You will pick up a lot of exposure to concepts, techniques, and processes that way, but without focused, deliberate practice, you’re just spinning your wheels.</p>

<!-- more -->


<p>When you’re working, the goals are to accomplish the task, avoid failure, and get things done. Space to truly engage in learning is incidental. You are in the closed mode; “don’t distract me, I’m on a mission!” Practice, on the other hand, is about working on a problem with the idea of exploring the problem area, of learning something, and your goal, oddly enough, is to Deliberately Fail.</p>

<p>At Blue Box Group, we have the usual geek clubhouse toys — a MAME cabinet with 1200+ video games, ping-pong, a kegerator (with two varieties of beer!), and a rather nice billiards table, which is our primary obsession these days. Not content with the classic pool hall games of 8-ball, 9-ball, or cut-throat, we play a peculiar game invented by our Principal Technologist we call “Calvin Pool.” The rules are simple – after the break, the person whose turn it is has to attempt to simply hit whichever ball on the table their opponent chooses with the cue ball. There are a few wrinkles, naturally, but more or less the game boils down to “try to make the most difficult shot possible.”</p>

<p>I can’t even begin to tell you how much my game has improved in the last few weeks. I’m making shots that long stymied me, shots that intimidate and impress people who are occasional players of the game. The practice of setting myself up to fail and practicing the difficult, exploring the various possible approaches to seemingly impossible problems, has made me confident when dealing with the easy obstacles.</p>

<p>Similarly, when practicing programming, you need to challenge yourself to learn through exploration and trials, and accept that, as often as not, failure is going to be your ultimate outcome. If you’re not failing, you’re not practicing – you’re just warming up. So, how does someone practice the art and skill of programming? Here are a couple ideas.</p>

<h3>Limit yourself</h3>

<p>Decide for an afternoon, a day, or even a week, you’re going to use a technique you’re unfamiliar with. Make life hard for yourself on purpose.</p>

<ul>
<li>MONKEY PATCH ALL THE THINGS!</li>
<li>Make everything a gem</li>
<li>TDD the living snot out of the next bug you fix</li>
<li>Use an IDE you don’t normally use for a month</li>
<li>Don’t use the letter ‘G’</li>
<li>Make all actions happen through observers</li>
</ul>


<p>By forcing yourself to find new patterns to solve your problems, you’ll quickly run into the current limits of your knowledge and experience, and push out past them.</p>

<h3>Have some fun while doing something dumb!</h3>

<p>Extend your practice by choosing a simple problem and keep solving it in new ways. Each time, add complications and obstructions. Solve a problem over and over, with new obstacles. For instance, let’s take this User Story as a place to start:</p>

<p>“The user will be able to convert a temperature in Celsius to Fahrenheit, and vice versa.”</p>

<p>Simple enough. Five minutes (or less) of Googling will turn up a myriad of solutions, and give you the basic math. Start with making it a small command-line app – easy-peasy lemon-squeezy! Once that’s done (you did tests, too, right?), let’s mutate it and iterate:</p>

<ul>
<li>Make it a gem</li>
<li>Release it on Github</li>
<li>Make it a website</li>
<li>Make it a mix-in on Numeric</li>
<li>Make it a web service</li>
<li>Find other temperature scales you could convert to and from</li>
<li>Have it attempt to resolve the user’s location via browser location or IP address, and give automated temperature conversions</li>
<li>Have it query wikipedia (or other data source) to offer information about the resulting temperature – trivia, facts, elements that melt or ignite or freeze at that temp, etc</li>
<li>Have it record the average, median, and min/max the user has calculated, and say witty things as milestones are passed</li>
<li>…</li>
</ul>


<p>Practice doesn’t have to be about flash cards and rote memorization. Try a little learning-by-doing, by applying concepts and techniques you want to try to your daily workflow but haven’t found the time for. Get your hands dirty and stretch outside your comfort zone, and approach previously solved and well-understood problems from a fresh perspective, to truly discover the benefits (and drawbacks) of approaches you’re unfamiliar with.</p>
]]></content>
  </entry>
  
</feed>
