<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Kerri Miller]]></title>
  <link href="http://kerrizor.com/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://kerrizor.com/"/>
  <updated>2016-03-07T11:36:33-08:00</updated>
  <id>http://kerrizor.com/</id>
  <author>
    <name><![CDATA[Kerri Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building APIs]]></title>
    <link href="http://kerrizor.com/blog/2014/04/22/building-apis/"/>
    <updated>2014-04-22T15:19:20-07:00</updated>
    <id>http://kerrizor.com/blog/2014/04/22/building-apis</id>
    <content type="html"><![CDATA[<p><strong>API</strong> stands for <em>Application Programming Interface</em>, and it&rsquo;s one way for applications to communicate and share information with each other.<!-- more --> When one app talks to another, they don&rsquo;t need the same user interface and image and JavaScript bits &ndash; they just need to pass data or commands back and forth, so we use plain text and JSON to accomplish this.</p>

<h2>What is an API?</h2>

<p>In its most common usage, we&rsquo;re referring to the <strong>public API</strong> of an application. Typically a public API allows anonymous users, or individuals who are not privy to the internal operations of an application, access to some, but not all, kinds of data held by the application, and to give the application a certain subset of commands. If we were working with the Twitter API, we might use it to implement the following features:</p>

<ul>
<li>fetch a user&rsquo;s followers</li>
<li>favorite a tweet</li>
<li>block a user from appearing on your timeline</li>
</ul>


<p>These are all examples of working with a public API. A software company opens its API to the public so that other software developers can build applications that are powered by its service.</p>

<h3>Internal APIs</h3>

<p>Imagine each class in your application as a separate application, a collection of individual little programs sending messages back and forth, asking each other to execute certain commands. This is the perspective most senior developers and those concerned with <strong>application architecture</strong> take towards the code. At this scale, we refer to the public methods of a class as that class&rsquo;s API. This view can help us identify the seams between different classes, where one class&rsquo;s responsibilities end and another&rsquo;s begin.</p>

<h3>Ask &ldquo;What does the user want to do?&rdquo;</h3>

<p>One of the more common failure of APIs is to simply expose the inner workings of models or controllers. Often this leads forcing users to understand the inner complexities, tangled dependencies, and specialized terminology of your particular application.</p>

<p>We can avoid this problem by asking from the very first, &ldquo;What does the user want to do?&rdquo; By putting ourselves into their shoes, working to question the assumptions and vocabulary of our audience, we can craft friendly, usable APIs that can lead to more interesting implementations than APIs that are artificially limiting their use cases through poor design.</p>

<h2>Building Your API</h2>

<p>Although its not 100% obvious, your Rails application is already an API. One application &mdash; your web browser &mdash; makes a request for some information. Rails generates a response that consists of HTML, and sends that data back to the browser. Its the <em>browser</em> that handles all the rendering and layout business.</p>

<p>Typically, our Rails APIs will strive to be RESTful, and return data formated as JSON. There are other valid formats, of course &ndash; XML is common in some use cases &ndash; but we&rsquo;ll be focusing on JSON for this.</p>

<p>When want a Rails app to return JSON instead of HTML, its fairly easy to tell the controller to do so. The same controller action can return different formats depending on whether your user is making a request from a browser or an API call from JavaScript. By default, Rails assumes you want HTML, but the app can determine which type of request is being made based on the extension.</p>

<p>Let&rsquo;s take a look at this with <a href="https://github.com/Ada-Developers-Academy/band_practice">band_practice</a> demo app. From the command line, we&rsquo;ll use <em>curl</em> to fetch the <code>#show</code> action for the Singles controller:</p>

<p>```</p>

<h1>returns HTML by default</h1>

<p>$ curl <a href="http://localhost:3000/singles/1">http://localhost:3000/singles/1</a>
```</p>

<p>Here&rsquo;s the result in our log:</p>

<p><code>
Started GET "/singles/1" for 127.0.0.1 at 2014-04-04 10:53:57 -0700
Processing by SinglesController#show as HTML
</code></p>

<p>Now let&rsquo;s make the same request, but append <code>.json</code> to the the URL.</p>

<p>```</p>

<h1>same controller and action, asking for JSON</h1>

<p>$ curl <a href="http://localhost:3000/singles/1.json">http://localhost:3000/singles/1.json</a>
```</p>

<p>Here&rsquo;s the result in our log for the JSON request:
<code>
Started GET "/singles/1.json" for 127.0.0.1 at 2014-04-04 10:57:03 -0700
Processing by SinglesController#show as JSON
</code></p>

<h2>Rendering HTML, JSON, and XML</h2>

<p>Adding the ability to render different response formats is a simple thing to add to our controller. We accomplish this by using the <code>responds_to</code> method.</p>

<p>```ruby
class SinglesController &lt; ApplicationController
  def show</p>

<pre><code>response = { title:  @single.title,
             artist: @single.artist,
             release_date: @single.release_date }

respond_to do |format|
  format.html
  format.json { render json: response }
  format.xml  { render xml: response }
end
</code></pre>

<p>  end
end
```</p>

<p><code>respond_to</code> passes a format object to the block, to which we assign various rendering options. Notice that we don&rsquo;t have to do anything for HTML, as Rails automatically knows to render the default template, however we <em>could</em> specify different behavior if we had a reason to.</p>

<p>We&rsquo;re using the <code>render</code> function to define what our response will look like. It is aware of a wide range of formats. When you pass it the key :json, it will call #to_json on the value, in this case our hash of specific attributes from the <code>@single</code> object. We could have simply passed it the <code>@single</code> object itself, like so:</p>

<p><code>ruby
respond_to do |format|
  format.html
  format.json { render json: @single }
  format.xml  { render xml: @single }
end
</code></p>

<p>Doing so would have transformed the object into a JSON hash, with attribute names as the keys and the value of the attributes as the values in the JSON.</p>

<h2>Response Codes</h2>

<p>We&rsquo;ve built a simple API that responds with some data. We could let the consumer of our API parse that data to figure out if their request was successful or if there was an error of some sort, but that seems like cumbersome for them. Instead, we can use HTTP status codes to provide a quick and easy way for our API&rsquo;s users to see the status of their request.</p>

<p>To set status code in your controller, just pass <code>:status</code> to our render method.</p>

<p><code>ruby
respond_to do |format|
  format.html
  format.json { render json: @single, status: :success }
  format.xml  { render xml: @single,  status: 200 }
end
</code></p>

<p>Notice in the example above, I used both <code>:success</code> as well as the official numeric value of 200 to inform the consumer that the request was a success. I tend to use the built-in Rails symbols for this, as they&rsquo;re more explicit, however its good to know at least the most common HTTP status codes.</p>

<ul>
<li>200 &ndash; :ok</li>
<li>204 &ndash; :no_content</li>
<li>301 &ndash; :moved_permanently</li>
<li>400 &ndash; :bad_request</li>
<li>403 &ndash; :forbidden</li>
<li>401 &ndash; :unauthorized</li>
<li>404 &ndash; :not_found</li>
<li>410 &ndash; :gone</li>
<li>422 &ndash; :unprocessable_entity</li>
<li>500 &ndash; :internal_server_error</li>
</ul>


<h3>Magic!</h3>

<p>Just like that, we&rsquo;ve built a very simple API. Naturally, it can get quite a bit more complicated, but this is basically all there is to it. See the resources listed below for further details.</p>

<h2>Resources</h2>

<p><a href="http://www.theodinproject.com/ruby-on-rails/apis-and-building-your-own">API Basics and Building Your Own</a></p>

<p><a href="http://www.amberbit.com/blog/2014/2/19/building-and-documenting-api-in-rails/">Building and documenting API in Rails</a></p>

<p><a href="http://mt.gomiso.com/2011/06/27/building-a-platform-api-on-rails/">Building a Platform API on Rails</a></p>

<p><a href="http://futureshock-ed.com/2011/03/04/http-status-code-symbols-for-rails/">HTTP status code symbols for Rails</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CarrierWave and S3]]></title>
    <link href="http://kerrizor.com/blog/2014/04/13/carrierwave-and-s3/"/>
    <updated>2014-04-13T15:13:22-07:00</updated>
    <id>http://kerrizor.com/blog/2014/04/13/carrierwave-and-s3</id>
    <content type="html"><![CDATA[<p>CarrierWave is a gem that adds a fairly simple and flexible way to users to upload files to our Rails application. <!-- more --> It also lets us resize images to make thumbnails and other sizes as we need them, and lets us upload all these uploaded (and generated) files to cloud storage products, such as S3.</p>

<h2>How-to</h2>

<h3>Make an S3 bucket</h3>

<p>S3 &mdash; Simple Storage Service
&ldquo;buckets&rdquo; are like folders</p>

<p>Let&rsquo;s start with a new Rails app</p>

<p><code>bash
$ rails new band_practice
$ cd band_practice
$ rails g scaffold band name genre
$ rake db:migrate
</code></p>

<h3>Setup CarrierWave and Fog Gems</h3>

<p>Fog is a gem that helps us work with <em>cloud services</em> like those from Amazon &ndash; EC2 or S3 &ndash; as well as cloud offerings from other companies (like Microsoft, Rackspace, Blue Box, etc).</p>

<p><code>ruby
gem 'carrierwave'
gem 'fog'
gem 'figaro'
</code></p>

<p>Might as well set up Figaro now, too.</p>

<p><code>
$ rails g figaro:install
</code></p>

<h3>Add An Uploader</h3>

<p>Now you need a uploader. This is the file which has all the settings like which folder the image will be saved, setting the image quality, caching etc.</p>

<p><code>bash
$ rails g uploader image
</code></p>

<p>The generator creates a new directory called <code>uploaders</code> under the <code>app</code> directory and in it a file called <code>image_uploader.rb</code>. In this file are a number of comments explaining how to customize the uploader. For example there is code to change the upload location, perform processing on the image after uploading and to restrict the type of files that can be uploaded. You should take a look at these options on your own, but for demonstration purposes we&rsquo;re going to get rid of most of it in favor of this:</p>

<p>```ruby
class ImageUploader &lt; CarrierWave::Uploader::Base
  include CarrierWave::MiniMagick</p>

<p>  def store_dir</p>

<pre><code>"uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}"
</code></pre>

<p>  end</p>

<p>  version :thumb do</p>

<pre><code>process :resize_to_fit =&gt; [32, 32]
</code></pre>

<p>  end</p>

<p>  version :preview do</p>

<pre><code>process :resize_to_fit =&gt; [256, 256]
</code></pre>

<p>  end</p>

<p>  version :full do</p>

<pre><code>process :resize_to_fit =&gt; [2048, 2048]
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>Next we&rsquo;ll need to add the uploader to the <code>Band</code> model. We&rsquo;ll need a column in the bands table to store it in so we&rsquo;ll generate a migration to do add it.</p>

<p><code>bash
 $ rails g migration add_image_to_bands image:string
 $ rake db:migrate
</code></p>

<p>Then, we <em>mount</em> the uploader on the <code>Band</code> model.</p>

<p><code>ruby
class Band &lt; ActiveRecord::Base
  mount_uploader :image, ImageUploader
end
</code></p>

<p>Add a <code>file_field</code> to the Band form.</p>

<p>app/views/bands/_form.html.erb
```ruby</p>

<div class="field">
  <%= f.label :image %><br>
  <%= f.file_field :image %>
</div>


<p>```</p>

<p>We add <code>:image</code> to the strong params for the controller.</p>

<p>app/controllers/bands_controller.rb
<code>ruby
def band_params
  params.require(:band).permit(:name, :genre, :image)
end
</code></p>

<p>Finally, we modify the scaffolded form and show pages to include a form element for the image upload, and modify the <code>form_for</code> to add an <code>:html</code> option.</p>

<p>apps/views/bands/show.html.erb
```ruby</p>

<p><p>
  &lt;%= image_tag @band.image_url.to_s %>
</p>
```</p>

<p>Now we can upload images &ndash; yay! In your terminal, take a look at <code>public/uploads</code> &ndash; <code>mini_magick</code> and <code>carrierwave</code> made all those files for us! We have access to these different sizes by passing the symbol of the size (as defined in our uploader model) to <code>#image_url</code></p>

<p>app/views/bands/show.html.erb
<code>ruby
&lt;p&gt;
  &lt;%= image_tag @band.image_url(:thumb).to_s %&gt;
&lt;/p&gt;
</code></p>

<h2>Uploading to S3</h2>

<p>This is cool, but we want to save to S3 instead of the local file system. This is pretty easy. First, we need to tell CarrierWave that we want to use S3. Make a new initializer, <code>config/initializers/carrierwave.rb</code></p>

<p>```ruby
CarrierWave.configure do |config|
  config.fog_credentials = {</p>

<pre><code>provider:               'AWS',
aws_access_key_id:      ENV['S3_KEY'],
aws_secret_access_key:  ENV['S3_SECRET'],
</code></pre>

<p>  }</p>

<p>  # For testing, upload files to local <code>tmp</code> folder.
  if Rails.env.test? || Rails.env.cucumber?</p>

<pre><code>config.storage           = :file
config.enable_processing = false
config.root              = "#{Rails.root}/tmp"
</code></pre>

<p>  else</p>

<pre><code>config.storage = :fog
</code></pre>

<p>  end</p>

<p>  config.cache_dir        = &ldquo;#{Rails.root}/tmp/uploads&rdquo; # To let CarrierWave work on Heroku
  config.fog_directory    = ENV[&lsquo;S3_BUCKET_NAME&rsquo;]
end
```</p>

<p>We also need to fill out our <code>config/application.yml</code> file. We can get the secret information from the <em>Security Credentials</em> screen in the AWS dashboard &ndash; I won&rsquo;t go into how to fetch this information here, as its likely to change from time to time.</p>

<h2>Resources</h2>

<p><a href="http://railscasts.com/episodes/253-carrierwave-file-uploads?view=asciicast">Railscasts #253 CarrierWave File Uploads</a></p>

<p><a href="http://railscasts.com/episodes/383-uploading-to-amazon-s3?view=asciicast">Railscasts #383 Uploading to Amazon S3</a></p>

<p><a href="http://richonrails.com/articles/allowing-file-uploads-with-carrierwave">Allowing File Uploads with CarrierWave</a></p>

<p><a href="http://www.javahabit.com/2012/06/03/saving-files-in-amazon-s3-using-carrierwave-and-fog-gem/">Saving files in Amazon S3 using CarrierWave and Fog Gem</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Quick Intro To MongoDB In Rails]]></title>
    <link href="http://kerrizor.com/blog/2014/04/02/quick-intro-to-mongodb-in-rails/"/>
    <updated>2014-04-02T17:04:33-07:00</updated>
    <id>http://kerrizor.com/blog/2014/04/02/quick-intro-to-mongodb-in-rails</id>
    <content type="html"><![CDATA[<p>By Internet standards, MongoDB is a venerable NoSQL database. <!-- more -->First introduced in 2009, it was designed as a scalable document storage engine. In Mongo, we don&rsquo;t work with tables and rows, we work with <strong>collections</strong> and <strong>documents</strong>. Documents contain JSON/BSON hashes, so any data that can be represented as a hash can be stored in Mongo. Mongo is a <strong>schemaless</strong> database, meaning there&rsquo;s no requirements nor enforcement about the structure of the data in a document.</p>

<p>Mongo is able to handle massive data sets quickly and efficiently, and is used by many big data organizations, including Foursquare, bit.ly, and CERN for collecting Large Hadron Collider data.</p>

<h2>Installation</h2>

<p>This is fairly straight forward using homebrew.</p>

<p><code>ruby
$ brew install mongodb
</code></p>

<p>When it finishes, it will print out some information on setting up Mongo to start whenever you start your computer. I&rsquo;m not a huge fan of that. Here&rsquo;s what I use:</p>

<p><code>ruby
$ brew services start mongodb
</code></p>

<p>..and to stop it:</p>

<p><code>ruby
$ brew services stop mongodb
</code></p>

<h2>Mongo and Rails</h2>

<p>Let&rsquo;s make a new Rails application, but specify that we do NOT want Active Record installed.</p>

<p><code>
$ rails new mongo-people --skip-active-record
</code></p>

<p><code>cd</code> into the project, and edit the Gemfile, add this line:</p>

<p><code>ruby
gem "mongoid", git: 'git://github.com/mongoid/mongoid.git'
</code></p>

<p>Save, and then run</p>

<p><code>
$ bundle install
</code></p>

<p>Just as when using a relational DB such as SQLite, Postgres, or MySQL, we need a configuration file. Mongoid installs a custom Rails generator for us. Run:</p>

<p><code>
$ rails generate mongoid:config
</code></p>

<p>Open up the file it creates, located at <code>config/mongoid.yml</code> and take a look. Take note of the different options we <em>could</em> configure. Don&rsquo;t make any changes at this time; its enough to just take a look at what the generator created on our behalf.</p>

<p>At this point, I like to run <code>rails s</code> and make sure the server starts, that everything is all hunkey-dorey. Once you&rsquo;ve checked in a browser that Rails is at least starting up correctly, let&rsquo;s make a new git repo and check in what we&rsquo;ve got so far.</p>

<p>Let&rsquo;s get started. Since this is a demonstration, let&rsquo;s cheat a little bit and use Rails' scaffolding generators to get us started.</p>

<p><code>
$ rails generate scaffold person name street city state
</code></p>

<p>Use <code>git status</code> to see what the command generated. It should all look pretty normal.. but let&rsquo;s take a look at the model it generated.</p>

<p><code>ruby
class Person
  include Mongoid::Document
  field :name, type: String
  field :street, type: String
  field :city, type: String
  field :state, type: String
end
</code></p>

<p>Quite different! MongoDB doesn&rsquo;t have a database schema, so no database migrations are needed. If we want a new field, we could just declare one in the model and add it to our views. Migrations are occasionally used, but they&rsquo;re for data migration or transformation, not changing the structure of the database.</p>

<p>Let&rsquo;s fire up our Rails server and visit the scaffolded route (at <code>http://localhost:3000/people</code>) There we see the vanilla Rails CRUD forms. Let&rsquo;s add a person.. and look at the URL in the show page &ndash; weird! We&rsquo;re used to seeing incrementing IDs created for us by the database. Each row that is added to the table increments the row counter by exactly 1, so we might say that each row has a locally unique sequential identifier.</p>

<p>MongoDB uses these weird looking hashes of alphanumerics like &ldquo;532e2ba7546f6c30aa000000&rdquo;. This <strong>Object ID</strong> is always 12 bytes, composed of a timestamp, client machine id, client process id, and a 3-byte incremented counter.</p>

<h2>Documents</h2>

<p>Let&rsquo;s take a look at what a document looks like.</p>

<p>You may have seen command line interfaces for PostgreSQL, so it shouldn&rsquo;t come as a shock that MongoDB offers one as well. In a terminal window:</p>

<p><code>
$ mongo mongo_people_development
</code></p>

<p>Note that I found the name of our database by looking at <code>config/mongoid.yml</code>.</p>

<p>Mongo uses its own special command language for working with its data. If you get stuck, just type <code>help</code>.</p>

<p>First, let&rsquo;s take a look at the collections in this database.
```javascript</p>

<blockquote><p>show collections
people
system.indexes</p>

<p>```</p></blockquote>

<p>To find a record, the format is <code>db.[collection].find()</code></p>

<p>```javascript</p>

<blockquote><p>db.people.find()
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;532e2ba7546f6c30aa000000&rdquo;), &ldquo;name&rdquo; : &ldquo;Kerri Miller&rdquo;, &ldquo;street&rdquo; : &ldquo;123 Main Street&rdquo;, &ldquo;city&rdquo; : &ldquo;SEATTLE&rdquo;, &ldquo;state&rdquo; : &ldquo;WA&rdquo; }
db.people.find({&ldquo;state&rdquo;:&ldquo;WA&rdquo;})
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;532e2ba7546f6c30aa000000&rdquo;), &ldquo;name&rdquo; : &ldquo;Kerri Miller&rdquo;, &ldquo;street&rdquo; : &ldquo;123 Main Street&rdquo;, &ldquo;city&rdquo; : &ldquo;SEATTLE&rdquo;, &ldquo;state&rdquo; : &ldquo;WA&rdquo; }</p>

<p>```</p></blockquote>

<p>Note that the first command returned ALL documents in the collection, we just happened to only have one document, so that&rsquo;s all that was returned.</p>

<p>Remember when I said that MongoDB stores everything as JSON? Mongo actually uses JavaScript here in the command line.</p>

<p>```javascript</p>

<blockquote><p>typeof db
object
typeof db.people
object
typeof db.people.find
function</p>

<p>```</p></blockquote>

<p>If we want to see what the code for a Mongo command looks like, we can call the function without parenthesis.</p>

<p>```javascript</p>

<blockquote><p>db.people.find
function ( query , fields , limit , skip, batchSize, options ){</p>

<pre><code>var cursor = new DBQuery( this._mongo , this._db , this ,
                    this._fullName , this._massageObject( query ) , fields , limit , skip , batchSize , options || this.getQueryOptions() );
</code></pre></blockquote>

<pre><code>var connObj = this.getMongo();
var readPrefMode = connObj.getReadPrefMode();
if (readPrefMode != null) {
    cursor.readPref(readPrefMode, connObj.getReadPrefTagSet());
}

return cursor;
</code></pre>

<p>}</p>

<blockquote><p>```</p></blockquote>

<h2>Wrapping Up</h2>

<h3>Why MongoDB?</h3>

<p>MongoDB is designed to be highly-scalable and flexible, but remain familiar enough that application developers could use it easily. Working with Mongo is mostly the same as working with a traditional RDBMS (except for being unable to do server-side JOINs between two sets of data..)</p>

<p>Because it can&rsquo;t do server-side JOINs, the relationships between different objects (Users have Posts, Posts have Comments, Comments have Users) can be tricky, as you need to set up those relationships in the model.</p>

<h3>Why not MongoDB?</h3>

<p>How MongoDB encourages denormalization of schemas (by not having any) might be a little too much for some to swallow. Some developers find the cold, hard constraints of a relational database reassuring.</p>

<p>Although sometimes restrictive, a database schema and the restraints it places on our data can be reassuring and useful. While MongoDB offers a huge increase in scalability and speed of record retrieval, its inability to relate documents from 2 different collections &mdash; the key strength of a RDBMS &mdash; makes it often not the best case for a CRUD-focused web application.</p>

<p>Because MongoDB is focused on large datasets, it works best in large clusters, which can be a pain to design and manage.</p>

<h2>Resources</h2>

<p><strong>Why I think Mongo is to Databases what Rails was to Frameworks</strong></p>

<p>Meaty blog post from John Nunemaker on why you should use MongoDB
<a href="http://www.railstips.org/blog/archives/2009/12/18/why-i-think-mongo-is-to-databases-what-rails-was-to-frameworks/">http://www.railstips.org/blog/archives/2009/12/18/why-i-think-mongo-is-to-databases-what-rails-was-to-frameworks/</a></p>

<p><strong>Why you should never use MongoDB</strong></p>

<p>Lengthy blog post by Sarah Mei on the Discourse project&rsquo;s use of MongoDB, and why they ultimately migrated to PostgreSQL. The comments are actually worth reading.
<a href="http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/">http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/</a></p>

<p><strong>Mongoid Gem</strong></p>

<p>Good documentation about working with MongoDB from a Ruby and RoR perspective
<a href="http://mongoid.org/en/mongoid/">http://mongoid.org/en/mongoid/</a></p>

<p><strong>Railscast on Mongoid</strong></p>

<p><a href="http://railscasts.com/episodes/238-mongoid">http://railscasts.com/episodes/238-mongoid</a></p>

<p><strong>Railscast on MongoDB</strong></p>

<p>This one is a bit dated but worth a read-through.
<a href="http://railscasts.com/episodes/194-mongodb-and-mongomapper">http://railscasts.com/episodes/194-mongodb-and-mongomapper</a></p>

<p><strong>Devise with Mondoid</strong></p>

<p><a href="http://railsapps.github.io/tutorial-rails-mongoid-devise.html">http://railsapps.github.io/tutorial-rails-mongoid-devise.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Internationalization (I18n)]]></title>
    <link href="http://kerrizor.com/blog/2014/03/31/rails-internationalization-i18n/"/>
    <updated>2014-03-31T12:01:32-07:00</updated>
    <id>http://kerrizor.com/blog/2014/03/31/rails-internationalization-i18n</id>
    <content type="html"><![CDATA[<p>Rails by default installs support for internationalization (or <em>I18n</em>) through the gem <code>i18n</code>. This gem add support for multiple language dictionaries and translation files, to let you easily change the language your site displays.</p>

<!-- more -->


<p>As you can imagine, I18n is a complex problem, since human languages differ in so many ways (pluralization, grammar, etc.) The Rails I18n API isn&rsquo;t perfect, but it does a fairly good job focusing on supporting English and other similar languages, and provides a framework to add support for languages that fall outside the paradigm of those (Japanese, Tagalog, or Hebrew, for example.)</p>

<h2>Getting Started</h2>

<p>Let&rsquo;s build a new Rails app and create a simple &ldquo;hello world&rdquo; page.</p>

<p><code>
$ rails new i18n_demo
$ cd i18n_demo
$ rails g controller welcome
</code>
I add a simple <code>views/welcome/index.html.erb</code> template, and we get a page that says &ldquo;Hello World&rdquo;. Now, let&rsquo;s use a translation dictionary to render this string.</p>

<p><em>welcome.html.erb</em>:
<code>erb
&lt;%= t(:hello) %&gt;
</code></p>

<p><em>config/locales/en.yml</em>:
<code>yml
en:
  hello: "Hello world"
</code></p>

<p>We reload the page, and magic! Rails loads the string from the translation file.</p>

<p>Let&rsquo;s set this app up to give us this page in French. First, let&rsquo;s make a new translations file:</p>

<p><em>config/locales/fr.yml</em>:
<code>yml
fr:
  hello: "Bonjour!"
</code></p>

<p>There&rsquo;s a variety of ways to tell our Rails application we want to change from the default language (which is English.) For the purposes of this demonstration, we&rsquo;ll use a simple query string.</p>

<p><em>app/controllers/application_controller.rb</em>:
```ruby
before_action :set_locale</p>

<p>def set_locale
  I18n.locale = params[:locale] || I18n.default_locale
end
```</p>

<p>Let&rsquo;s restart our server, and append <code>?locale=fr</code> to our URL and see what happens.</p>

<p>Awesome!</p>

<p>We could define a translation file for any language; we&rsquo;re not limited to just the 2 letter language abbreviations!</p>

<p><em>config/locales/pirate.yml</em>:
<code>yml
pirate:
  hello: "Ahoy mateys!"
</code></p>

<p>By starting with I18n early in an app, its fairly easy to add new language support to your application. Generally its a matter of taking an existing translations file and sending it to a translator to interpret the strings for you, then adding it to your repo.</p>

<p>Of course, nothing is ever that simple.</p>

<h2>Interpolation</h2>

<p>What if we wanted to greet a user by name?</p>

<p><em>config/locales/en.yml</em>:
<code>yml
en:
  hello_name: 'Hello, %{name}!'
</code></p>

<p><em>app/views/welcome/index.html.erb</em>:
<code>erb
&lt;%= t(:hello_name, name: "Kerri") %&gt;
</code></p>

<p>We&rsquo;re just putting a string in here, but it could easily be a value from an object. For example:</p>

<p><code>erb
&lt;%= t(:hello_name, name: current_user.name) %&gt;
</code></p>

<p>While this solution generally works fine, you may be able to already see how this is potentially a sticky situation, depending on the language!</p>

<h2>Pluralization</h2>

<p>The other situation that comes up that causes some problems is pluralization.</p>

<p><em>config/locales/en.yml</em>:
<code>yml
inbox:
  zero: 'You have no messages'
  one: 'You have one message'
  other: 'You have %{count} messages'
</code></p>

<p><em>app/views/welcome/index.html.erb</em>:
<code>erb
&lt;%= t(:inbox, count: 2) %&gt;
</code></p>

<p>Magic!</p>

<h2>Resources</h2>

<p><a href="http://guides.rubyonrails.org/i18n.html">Rails Guides &ndash; I18N</a></p>
]]></content>
  </entry>
  
</feed>
