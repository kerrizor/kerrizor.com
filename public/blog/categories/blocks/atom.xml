<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blocks | Kerri Miller]]></title>
  <link href="http://kerrizor.com/blog/categories/blocks/atom.xml" rel="self"/>
  <link href="http://kerrizor.com/"/>
  <updated>2014-05-01T17:00:13-07:00</updated>
  <id>http://kerrizor.com/</id>
  <author>
    <name><![CDATA[Kerri Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Magic 201: Blocks]]></title>
    <link href="http://kerrizor.com/blog/2014/05/01/ruby-magic-201-blocks/"/>
    <updated>2014-05-01T16:54:59-07:00</updated>
    <id>http://kerrizor.com/blog/2014/05/01/ruby-magic-201-blocks</id>
    <content type="html"><![CDATA[<p>Blocks are not a unique features of Ruby, but they&rsquo;re one that many people talk about (and more people use without realizing it!) What is a block?</p>

<!-- more -->


<blockquote><p>A section of code which is grouped together.</p></blockquote>

<p>Zzzzz&hellip;.</p>

<p>A block is a piece of code that is not executed immediately, but is stored in a variable or passed to a method, and is potentially executed at a later moment in time.</p>

<p>Sound complicated? Let&rsquo;s look at some Ruby.</p>

<p><code>ruby
2.0.0-p353 :001 &gt; 4+5
 =&gt; 9
</code></p>

<p>Pretty simple. Now let&rsquo;s try it with variables.</p>

<p><code>ruby
2.0.0-p353 :002 &gt; a = 4
 =&gt; 4
2.0.0-p353 :003 &gt; b = 5
 =&gt; 5
2.0.0-p353 :004 &gt; a+b
 =&gt; 9
</code></p>

<p>Now, what if we wanted to store this behavior, of <code>a + b</code>? Well, we could write a method:</p>

<p><code>ruby
2.0.0-p353 :005 &gt; def add(a,b)
2.0.0-p353 :006?&gt;   a + b
2.0.0-p353 :007?&gt;   end
 =&gt; nil
2.0.0-p353 :008 &gt; add(4,5)
 =&gt; 9
</code></p>

<p>That&rsquo;s ok, but there&rsquo;s an easier way.</p>

<p><code>ruby
2.0.0-p353 :009 &gt; add = lambda {|a, b| return a + b }
 =&gt; #&lt;Proc:0x0000010363fa48@(irb):9 (lambda)&gt;
2.0.0-p353 :010 &gt; add.call(4,5)
 =&gt; 9
</code></p>

<blockquote><p><strong>Questions to Ponder:</strong> What&rsquo;s the difference? When would one be more useful or appropriate?</p></blockquote>

<p>Not to confuse you, but let me show you another way you might see this formatted. The following two lines of code work identically.</p>

<p><code>ruby
add = lambda {|a, b| return a + b }
add = -&gt; (a, b) { return a + b }
</code></p>

<p>The second format is referred to as a <strong>stabby lambda</strong> and you may see it from time to time.</p>

<h2>Why would I need this?</h2>

<p>Would you believe you&rsquo;ve already been using them without knowing it? Take this bit of Ruby:</p>

<p><code>
[1,2,3].select { |n| n.odd? }
</code></p>

<p>In the above example, <code>{ |n| n.odd? }</code> is a block! We&rsquo;re passing it in to <code>.select</code> (a method from the Enumerable module) which loops over each element in the Array and uses the block to determine what to return.</p>

<p>Here&rsquo;s another use of a block:</p>

<p><code>ruby
[1,2,3].select do |n|
  n.odd?
end
</code></p>

<p>Different format, same output.</p>

<blockquote><p><strong>Questions to Ponder:</strong> Why would you use <code>{}</code> versus <code>do/end</code>? If they&rsquo;re functionally the same, what might using one over another tell someone else about the code?</p></blockquote>

<p>If I were to rewrite <code>.select</code> in Ruby, it might look something like this:</p>

<p>```ruby
module KerriEnumerable
  def k_each</p>

<pre><code>i = 0
while(i &lt; self.length) do
  yield(self[i])
  i += 1
end
</code></pre>

<p>  end</p>

<p>  def k_select</p>

<pre><code>output = []
k_each { |e| output &lt;&lt; e if yield(e) }
output
</code></pre>

<p>  end
end
```</p>

<p>Copying this into IRB:</p>

<p><code>ruby
2.0.0-p353 :018?&gt; class Array
2.0.0-p353 :019?&gt;   include KerriEnumerable
2.0.0-p353 :020?&gt;   end
2.0.0-p353 :021 &gt; [1,2,3].k_select{ |n| n.odd? }
 =&gt; [1, 3]
2.0.0-p353 :022 &gt; [1,2,3].k_select{ |n| n.even? }
 =&gt; [2]
2.0.0-p353 :023 &gt; [1,2,3].k_select{ |n| puts n }
1
2
3
 =&gt; []
2.0.0-p353 :024 &gt;
</code></p>

<h2>Working with blocks</h2>

<p>When using blocks, we usually only send one block at a time to a method. There are two ways to work with blocks &ndash; <code>yield</code> and <em>explicit blocks</em>.</p>

<h3>Yield</h3>

<p>You&rsquo;ve probably seen <code>yield</code> in Rails templates; it features prominently smack dab in the middle of most people&rsquo;s <code>app/views/layouts/application.erb.html</code>. <code>yield</code> is a <strong>keyword</strong> command (like <code>def</code> or <code>class</code>) and it tells Ruby to attempt to execute whatever block was passed to the current method.</p>

<p>```ruby
def calculator(a,b)
  yield(a,b)
end</p>

<p>2.0.0-p353 :008 > calculator(4,5){ |a,b| a+b }
 => 9
2.0.0-p353 :009 > calculator(4,5){ |a,b| a*b }
 => 20
2.0.0-p353 :010 > calculator(4,5){ |a,b| a-b }
 => -1
```</p>

<p>What happens if we don&rsquo;t pass a block in to <code>calculator</code>?</p>

<p>```ruby
2.0.0-p353 :011 > calculator(4,5)
LocalJumpError: no block given (yield)</p>

<pre><code>from (irb):6:in `calculator'
from (irb):11
from /Users/kerri/.rvm/rubies/ruby-2.0.0-p353/bin/irb:12:in `&lt;main&gt;'
</code></pre>

<p>```</p>

<p><code>yield</code> is a little bit magical, as its actually breaking some of the object oriented rules underlying Ruby, but it has the advantage of being fast.</p>

<h3>Explicit Blocks</h3>

<p>Explicit Blocks, on the other hand, are slower. However, when using <code>yield</code> we&rsquo;re not being clear about what we&rsquo;re trying to do. With an explicit block, we&rsquo;re declaring an incoming method parameter to be a block, then executing on it.</p>

<p><code>ruby
def calculator(a,b, &amp;calculation)
  calculation.call(a,b)
end
</code></p>

<p>Since <code>calculation</code> is an object (a Proc), rather than a magical keyword, we can interact with it and call methods on it. Often this is more practical.</p>

<h2>Resources</h2>

<p><a href="https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/18-blocks/lessons/51-new-lesson"><strong>RubyMonk &ndash; Blocks</strong></a></p>

<p>Interactive tutorial on blocks.</p>

<p><a href="http://verboselogging.com/2011/09/20/proc-block-and-two-smoking-lambdas"><strong>Proc, Block, and Two Smoking Lambdas</strong></a></p>

<p>A technical blog post from Daniel Huckstep about the difference between Procs, Blocks, and Lambdas.</p>

<p><a href="https://practicingruby.com/articles/building-enumerable-and-enumerator"><strong>Building Enumerable &amp; Enumerator in Ruby</strong></a></p>

<p>A great exercise if you have a couple hours and really want to learn this stuff!</p>
]]></content>
  </entry>
  
</feed>
